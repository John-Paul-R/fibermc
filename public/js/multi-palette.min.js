var mpal = function (e) {
    "use strict";
/*! Shade/blend hex colors (for more info, see: https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js) )*/const t = e => { let t = parseInt, n = Math.round, c = e.length, o = {}; if (c > 9) { if ([r, g, b, a] = e = e.split(","), c = e.length, c < 3 || c > 4) return null; o.r = t("a" == r[3] ? r.slice(5) : r.slice(4)), o.g = t(g), o.b = t(b), o.a = a ? parseFloat(a) : -1 } else { if (8 == c || 6 == c || c < 4) return null; c < 6 && (e = "#" + e[1] + e[1] + e[2] + e[2] + e[3] + e[3] + (c > 4 ? e[4] + e[4] : "")), e = t(e.slice(1), 16), 9 == c || 5 == c ? (o.r = e >> 24 & 255, o.g = e >> 16 & 255, o.b = e >> 8 & 255, o.a = n((255 & e) / .255) / 1e3) : (o.r = e >> 16, o.g = e >> 8 & 255, o.b = 255 & e, o.a = -1) } return o }, n = (e, r, n, c) => { let o, s, a, l, i, f, u, h = Math.round, m = "string" == typeof n; return "number" != typeof e || e < -1 || e > 1 || "string" != typeof r || "r" != r[0] && "#" != r[0] || n && !m ? null : (u = r.length > 9, u = m ? n.length > 9 || "c" == n && !u : u, i = t(r), l = e < 0, f = n && "c" != n ? t(n) : l ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }, l = 1 - (e = l ? -1 * e : e), i && f ? (c ? (o = h(l * i.r + e * f.r), s = h(l * i.g + e * f.g), a = h(l * i.b + e * f.b)) : (o = h((l * i.r ** 2 + e * f.r ** 2) ** .5), s = h((l * i.g ** 2 + e * f.g ** 2) ** .5), a = h((l * i.b ** 2 + e * f.b ** 2) ** .5)), m = i.a, f = f.a, i = m >= 0 || f >= 0, m = i ? m < 0 ? f : f < 0 ? m : m * l + f * e : 0, u ? "rgb" + (i ? "a(" : "(") + o + "," + s + "," + a + (i ? "," + h(1e3 * m) / 1e3 : "") + ")" : "#" + (4294967296 + 16777216 * o + 65536 * s + 256 * a + (i ? h(255 * m) : 0)).toString(16).slice(1, i ? void 0 : -2)) : null) }, c = "selectedPaletteIndex"; var o, s; e.currentPalette = void 0; var l = []; const i = e => { let r = t(e); return Math.max(r.r, r.g, r.b) / 255 }; function f(e, t) { return t = t || 2, (new Array(t).join("0") + e).slice(-t) } const u = (e, t = .15) => { const r = []; r.push(e); let c = n(t, e, !1, !0), o = n(-1 * t, e, !1, !0); return i(e) < .5 ? (r.push(c), r.push(o)) : (r.push(o), r.push(c)), r }; class h { constructor(e, t, r, n, c, o, s) { Array.isArray(e) ? (this.paletteName = e[0], this.base = e[1], this.element1 = e[2], this.accent1 = e[3], this.accent2 = e[4], this.text = e[5], this.textAccent1 = e[6]) : (this.paletteName = e, this.base = t, this.element1 = r, this.accent1 = n, this.accent2 = c, this.text = o, this.textAccent1 = s) } } class m { constructor(e) { this.paletteName = e.paletteName, this.base = u(e.base), this.background = e.base, this.element1 = u(e.element1), this.accent1 = u(e.accent1), this.accent2 = u(e.accent2, .2), this.text = u(e.text), this.textInverse = function (e) { if (0 === e.indexOf("#") && (e = e.slice(1)), 3 === e.length && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]), 6 !== e.length) throw new Error("Invalid HEX color."); var t = (255 - parseInt(e.slice(0, 2), 16)).toString(16), r = (255 - parseInt(e.slice(2, 4), 16)).toString(16), n = (255 - parseInt(e.slice(4, 6), 16)).toString(16); return "#" + f(t) + f(r) + f(n) }(e.text), this.textAccent1 = e.textAccent1 } } var d = [["LYellow", "#F2F1E8", "#FBFBF9", "#FF8200", "#129490", "#000000", "#000000"], ["BGY", "#172A3A", "#174079", "#09BC8A", "#F9DB6D", "#ffffff", "#000000"], ["Dark", "#252525", "#333333", "#ff4f4f", "#888888", "#f0f0f0", "#000000"], ["DarkBY", "#000000", "#14213d", "#fca311", "#e5e5e5", "#ffffff", "#000000"], ["DBPink", "#13131b", "#16213e", "#e94560", "#0f3460", "#ffffff", "#000000"], ["DWarm", "#321f28", "#734046", "#e28f36", "#E15E35", "#ffffff", "#000000"], ["LBlue", "#eeeeee", "#d0e0e6", "#086b8e", "#373a40", "#000000", "#ffffff"], ["DGG   ", "#382933", "#3b5249", "#95C623", "#0f3460", "#ffffff", "#000000"], ["BGY", "#FFF4EC", "#98D7D6", "#CC2936", "#F9DB6D", "#000000", "#ffffff"]], p = 6, y = 1; function v() { (s += 1) >= d.length && (s = 0), P(s), window.localStorage.setItem(c, s); for (const t of l) t(e.currentPalette) } function P(t) { const r = document.documentElement.style; let n = new m(d[t]); return r.setProperty("--color-base", n.base[0]), r.setProperty("--color-base-1", n.base[1]), r.setProperty("--color-base-2", n.base[2]), r.setProperty("--color-background", n.background), r.setProperty("--color-element", n.element1[0]), r.setProperty("--color-element-1", n.element1[1]), r.setProperty("--color-element-2", n.element1[2]), r.setProperty("--color-accent-1", n.accent1[0]), r.setProperty("--color-accent-1-1", n.accent1[1]), r.setProperty("--color-accent-1-2", n.accent1[2]), r.setProperty("--color-accent-2", n.accent2[0]), r.setProperty("--color-accent-2-1", n.accent2[1]), r.setProperty("--color-accent-2-2", n.accent2[2]), r.setProperty("--color-text", n.text[0]), r.setProperty("--color-text-1", n.text[1]), r.setProperty("--color-text-2", n.text[2]), r.setProperty("--color-text-inverse", n.textInverse), r.setProperty("--color-text-accent-1", n.textAccent1), x(n), e.currentPalette = n, n } function x(e) { const t = document.getElementsByClassName("icon_after"), r = document.getElementsByClassName("icon"); let n, c; i(e.text[0]) >= .5 ? (n = e => e.classList.add("invert"), document.documentElement.style.setProperty("--multi-palette-invert", "100%")) : (n = e => e.classList.remove("invert"), document.documentElement.style.setProperty("--multi-palette-invert", "0%")), c = i(e.textAccent1) >= .5 ? e => e.classList.add("invert") : e => e.classList.remove("invert"); const o = e => { e.matches("#navbar .button") || e.matches("#navbar .button *") || e.matches(".icon.base") ? n(e) : c(e) }; for (let e = 0; e < t.length; e++)o(t[e]); for (let e = 0; e < r.length; e++)o(r[e]) } d = d.map((e => new h(e))), function () { let e = window.localStorage.getItem(c); if (e) s = parseInt(e, 10); else { let e = window.matchMedia("(prefers-color-scheme: dark)"); s = e.matches ? y : p, window.localStorage.setItem(c, s) } P(s) }(), function () { const e = (t = "palette_light_dark", (n = document.createElement("style")).appendChild(document.createTextNode("")), n.rel = "stylesheet", n.media = r || "screen", n.id = t, document.head.appendChild(n), n.sheet); var t, r, n; e.insertRule(".github.invert::before {\n        filter: invert(100%);\n    }"), e.insertRule(".github.invert {\n        filter: none;\n    }"), e.insertRule(".invert {\n        filter: invert(100%);\n    }"), e.insertRule(".icon_dark {\n        filter: invert(var(--multi-palette-invert));\n    }") }(), document.addEventListener("DOMContentLoaded", (() => { x(e.currentPalette), function (e) { o = e || document.getElementsByClassName("swap_palette"); for (let e = 0; e < o.length; e++)o[e].addEventListener("click", v) }(), P(s) })); return e.onPaletteChange = function (e) { l.push(e) }, e.registerPalette = (e, t, r, n, c, o, s) => d.push(new h(e, t, r, n, c, o, s)), e.setPalette = function (t) { if (t >= d.length) return -1; P(t), window.localStorage.setItem(c, t); for (const t of l) t(e.currentPalette) }, Object.defineProperty(e, "__esModule", { value: !0 }), e
}({});
